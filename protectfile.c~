#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <assert.h>
#include <fcntl.h>
#include <unistd.h>
//#include <skeylib.h>
#include <math.h>

#include "rijndael.h"

#define KEYBITS 128

void do_crypt (char *filename, int k0, int k1);

unsigned int from_hex (char *hex_str) {

  unsigned int hex_num;
  sscanf (hex_str, "%x", &hex_num);
  return hex_num;

}

int main (int argc, char **argv) {

  if (argc != 4) {
    printf ("Standard for main arguments:[-d/-e] [hex #] [filename]\n");
    exit (1);
  }

  char e_or_d = argv[1][0];
  char *key = argv[2];
  char *filename = argv[3];

  struct stat file_info;
  stat (filename, &file_info);

  if (e_or_d != 'e' && e_or_d != 'd') {
    printf ("first arg must be 'e' or 'd'\n");
    exit (1);
  }

  /* Get integers from key string */
  if (strlen (key) != 16){
    printf("The key you have provided isn't long enough.\n");
    return (-1);
  }
  char high_bits[9];
  char low_bits[9];
  int i;
  for (i = 0; i < 8; ++i) {
    high_bits[i] = key[i];
  }
  for (i = 8; i < 16; ++i) {
    low_bits[i-8] = key[i];
  }

  unsigned int k0 = from_hex (high_bits);
  unsigned int k1 = from_hex (low_bits);

  /*int setkeyval = setkey (k0, k1);

    if (setkeyval == 2) {
    printf ("keys not matched\n");
    exit (1);
    }
    if (setkeyval == 1 && e_or_d == 'd') {
    printf ("decrypting unencrypted file\n");
    exit (1);
    }*/

  char *turn_sticky_on[4] = {"chmod", "+t", filename, NULL};
  char *turn_sticky_off[4] = {"chmod", "-t", filename, NULL};
  char **args;

  if (e_or_d == 'e') {
    if ((file_info.st_mode & 0x200) != 0) {
      printf ("file already encrypted\n");
      return 0;
    }
    args = turn_sticky_on;
    do_crypt (filename, k0, k1);
    execvp (*args, args);
  } else {
    if ((file_info.st_mode & 0x200) == 0) {
      printf ("file not encrypted\n");
      return 0;
    }
    printf ("decrypting\n");
    args = turn_sticky_off;
    execvp (*args, args);
    do_crypt (filename, k0, k1);
  }
  return 0;
}

void do_crypt (char *filename, int k0, int k1) {
  unsigned long rk[RKLENGTH(KEYBITS)];/* round key */
  unsigned char key[KEYLENGTH(KEYBITS)];/* cipher key */
  char buf[100];
  int i, nbytes, nwritten , ctr;
  int totalbytes;
  int fileId;
  int fd;
  int nrounds; /* # of Rijndael rounds */
  unsigned char filedata[16];
  unsigned char ciphertext[16];
  unsigned char ctrvalue[16];

  bcopy (&k0, &(key[0]), sizeof (k0));
  bcopy (&k1, &(key[sizeof(k0)]), sizeof (k1));

  nrounds = rijndaelSetupEncrypt(rk, key, KEYBITS);

  fd = open(filename, O_RDWR);
  if (fd < 0)
    {
      fprintf(stderr, "Error opening file %s\n", filename);
      exit (1);
    }

  struct stat file_info;
  stat (filename, &file_info);
  fileId = (int) file_info.st_ino;
  bcopy (&fileId, &(ctrvalue[8]), sizeof (fileId));

  for (ctr = 0, totalbytes = 0; /* loop forever */; ctr++)
    {
      /* Read 16 bytes (128 bits, the blocksize) from the file */
      nbytes = read (fd, filedata, sizeof (filedata));
      if (nbytes <= 0) {
	break;
      }
      if (lseek (fd, totalbytes, SEEK_SET) < 0)
	{
	  perror ("Unable to seek back over buffer");
	  exit (-1);
	}

      /* Set up the CTR value to be encrypted */
      bcopy (&ctr, &(ctrvalue[0]), sizeof (ctr));

      /* Call the encryption routine to encrypt the CTR value */
      rijndaelEncrypt(rk, nrounds, ctrvalue, ciphertext);

      /* XOR the result into the file data */
      for (i = 0; i < nbytes; i++) {
	filedata[i] ^= ciphertext[i];
      }

      /* Write the result back to the file */
      nwritten = write(fd, filedata, nbytes);
      if (nwritten != nbytes)
	{
	  break;
	}

      /* Increment the total bytes written */
      totalbytes += nbytes;
    }
  close (fd);
}
